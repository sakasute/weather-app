{"version":3,"sources":["SearchForm/SearchForm.js","CityNotFoundPage/CityNotFoundPage.js","CityPage/CityPage.js","FavouritesList/FavouritesList.js","InitialPage/InitialPage.js","App.js","index.js"],"names":["SearchForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","placeholderText","state","cityQuery","event","setState","target","value","preventDefault","fetchCityWeather","cityQueryArr","split","length","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","Component","CityNotFoundPage","CityPage","_ref","data","isFavourite","toggleFavourite","cityName","concat","name","sys","country","temp","Math","round","main","tempStr","btnClasses","btnText","onClick","id","href","rel","FavouritesList","favourites","selectCity","selectedCityId","favouriteLis","values","sort","b","map","favourite","classes","key","InitialPage","App","parseWeatherData","addFavourite","removeFavourite","owmApiKey","process","units","weatherData","obj","keys","includes","toString","favouritesStr","localStorage","getItem","JSON","parse","_this2","countryCode","arguments","undefined","_this$state","baseApiUrl","fetch","then","res","json","owmData","cod","cityId","prevState","update","defineProperty","$set","cityWeatherData","Date","now","dt","_this$state2","constructor","checkIfIdIsKey","cityData","favouritesUpdated","setItem","stringify","$unset","mainContent","_this$state3","CityPage_CityPage","favouritesEl","FavouritesList_FavouritesList","SearchForm_SearchForm_SearchForm","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f80e89ab.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./SearchForm.css\";\n\nexport default class SearchForm extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.placeholderText = \"E.g. Turku, FI\";\n    this.state = { cityQuery: \"\" };\n  }\n\n  handleChange(event) {\n    this.setState({ cityQuery: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const { cityQuery } = this.state;\n    const { fetchCityWeather } = this.props;\n    const cityQueryArr = cityQuery.split(\",\");\n\n    if (cityQueryArr.length === 2) {\n      fetchCityWeather(cityQueryArr[0], cityQueryArr[1]);\n    }\n    fetchCityWeather(cityQueryArr[0]);\n  }\n\n  render() {\n    const { cityQuery } = this.state;\n\n    return (\n      <form className=\"search\" onSubmit={this.handleSubmit}>\n        <label className=\"card__title search__label\">\n          Search for a city:\n          <input\n            className=\"search__text-field\"\n            type=\"text\"\n            value={cityQuery}\n            placeholder={this.placeholderText}\n            onChange={this.handleChange}\n          />\n        </label>\n        <input className=\"search__btn\" type=\"submit\" value=\"GO!\" />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function CityNotFoundPage() {\n  return <p className=\"info-text info-text--center\">No such city found :(</p>;\n}\n","import React from \"react\";\n\nimport \"./CityPage.css\";\n\nexport default function CityPage({ data, isFavourite, toggleFavourite }) {\n  const cityName = `${data.name}, ${data.sys.country}`;\n  // add \"+\" sign in front of positive temperatures and round temps\n  const temp = Math.round(data.main.temp);\n  const tempStr = temp > 0 ? `+${temp}` : temp;\n\n  const btnClasses = isFavourite\n    ? \"city__fav-btn  city__fav-btn--remove\"\n    : \"city__fav-btn\";\n\n  const btnText = isFavourite ? \"UNFAVOURITE\" : \"FAVOURITE\";\n\n  return (\n    <section className=\"city\">\n      <h2 className=\"city__name\">{cityName}</h2>\n      <button className={btnClasses} onClick={() => toggleFavourite(data.id)}>\n        {btnText}\n      </button>\n      <h3 className=\"city__temp\">{tempStr} &deg;C</h3>\n      <span className=\"city__data-disclaimer\">\n        Weather data provided by{\" \"}\n        <a\n          href=\"https://openweathermap.org/\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          OpenWeatherMap\n        </a>\n      </span>\n    </section>\n  );\n}\n","import React from \"react\";\nimport \"./FavouritesList.css\";\n\nexport default function FavouritesList({\n  favourites,\n  selectCity,\n  selectedCityId\n}) {\n  const favouriteLis = Object.values(favourites)\n    .sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      } else if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    })\n    .map(favourite => {\n      const { id, name, country } = favourite;\n      const classes =\n        id === selectedCityId\n          ? \"favourites__item favourites__item--selected\"\n          : \"favourites__item\";\n      return (\n        <li\n          className={classes}\n          key={id}\n          onClick={() => selectCity(id, name, country)}\n        >{`${name}, ${country}`}</li>\n      );\n    });\n\n  return <ul className=\"favourites\">{favouriteLis}</ul>;\n}\n","import React from \"react\";\n\nexport default function InitialPage() {\n  return (\n    <p className=\"info-text info-text--center\">\n      Search for a city or select one from your favourites.\n    </p>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./SearchForm/SearchForm\";\nimport CityNotFoundPage from \"./CityNotFoundPage/CityNotFoundPage\";\nimport CityPage from \"./CityPage/CityPage\";\nimport FavouritesList from \"./FavouritesList/FavouritesList\";\nimport InitialPage from \"./InitialPage/InitialPage\";\nimport SearchForm from \"./SearchForm/SearchForm\";\n\nimport update from \"immutability-helper\";\n\nclass App extends Component {\n  /* \n  Helper function to check if id-number is found in given object's keys\n  */\n  static checkIfIdIsKey(obj, id) {\n    return Object.keys(obj).includes(id.toString());\n  }\n\n  constructor(props) {\n    super(props);\n    this.fetchCityWeather = this.fetchCityWeather.bind(this);\n    this.parseWeatherData = this.parseWeatherData.bind(this);\n    this.selectCity = this.selectCity.bind(this);\n\n    this.addFavourite = this.addFavourite.bind(this);\n    this.removeFavourite = this.removeFavourite.bind(this);\n    this.toggleFavourite = this.toggleFavourite.bind(this);\n\n    this.state = {\n      // NOTE: I do realize that this doesn't protect the Api key from being viewed\n      // client-side but at least it isn't stored in the public repository.\n      owmApiKey: process.env.REACT_APP_OWM_API_KEY,\n      units: \"metric\", // 'imperial' or 'metric'\n      weatherData: {},\n      selectedCityId: \"\", // cityId from OWM or boolean false, if city not found\n      favourites: {}\n    };\n  }\n\n  // Get the favourites from localStorage\n  componentDidMount() {\n    const favouritesStr = localStorage.getItem(\"favourites\");\n    if (favouritesStr !== null) {\n      const favourites = JSON.parse(favouritesStr);\n      this.setState({ favourites });\n    }\n  }\n\n  /* \n  Returns the OpenWeatherMap json-object for the city or boolean false if no\n  such city was found.\n  \n  params: name of the city and optionally the two letter country code.\n  */\n  fetchCityWeather(cityName, countryCode = \"\") {\n    const { owmApiKey, units } = this.state;\n    const baseApiUrl = `https://api.openweathermap.org/data/2.5/weather?APPID=${owmApiKey}&units=${units}`;\n    // adds country code to the query if it was given\n    const cityQuery =\n      countryCode.length === 2 ? `${cityName},${countryCode}` : cityName;\n\n    fetch(baseApiUrl + `&q=${cityQuery}`)\n      .then(res => res.json())\n      .then(json => {\n        this.parseWeatherData(json);\n      });\n  }\n\n  /* \n  Checks if a city was found and sets weatherData and selectedCityId inside state\n  accordingly.\n\n  params: the json response from the OpenWeatherMap API\n  */\n  parseWeatherData(owmData) {\n    // 404 if no such city, 400 if bad request, mainly empty query\n    if (owmData.cod === \"404\" || owmData.cod === \"400\") {\n      this.setState({ selectedCityId: false });\n    } else {\n      const cityId = owmData.id;\n      this.setState(prevState =>\n        update(prevState, {\n          weatherData: { [cityId]: { $set: owmData } },\n          selectedCityId: { $set: cityId }\n        })\n      );\n    }\n  }\n\n  /* \n  Marks the given city as selected. Doesn't fetch data if recent enough data\n  available.\n  */\n  selectCity(cityId, cityName, countryCode) {\n    const { weatherData } = this.state;\n    const cityWeatherData = weatherData[cityId];\n    if (typeof cityWeatherData === \"undefined\") {\n      // the data could be fetched using the cityId also but I wanted to\n      // keep things simple and not add another function/modify the fetch function.\n      this.fetchCityWeather(cityName, countryCode);\n    } else if (Date.now() - 1000 * cityWeatherData.dt > 3600000) {\n      // if existing data is older than 60 min, fetch fresh data\n      this.fetchCityWeather(cityName, countryCode);\n    } else {\n      this.setState(prevState =>\n        update(prevState, {\n          selectedCityId: { $set: cityId }\n        })\n      );\n    }\n  }\n\n  toggleFavourite(cityId) {\n    const { favourites, weatherData } = this.state;\n    if (this.constructor.checkIfIdIsKey(favourites, cityId)) {\n      this.removeFavourite(cityId);\n    } else {\n      const cityData = weatherData[cityId];\n      const cityName = cityData.name;\n      const countryCode = cityData.sys.country;\n      this.addFavourite(cityId, cityName, countryCode);\n    }\n  }\n\n  /* \n  Add a new favourite to the localStorage and to the state.\n  */\n  addFavourite(cityId, cityName, countryCode) {\n    const { favourites } = this.state;\n    const favouritesUpdated = update(favourites, {\n      [cityId]: { $set: { id: cityId, name: cityName, country: countryCode } }\n    });\n    localStorage.setItem(\"favourites\", JSON.stringify(favouritesUpdated));\n\n    this.setState({ favourites: favouritesUpdated });\n  }\n\n  /* \n  Remove a favourite from the localStorage and from the state.\n  */\n  removeFavourite(cityId) {\n    const { favourites } = this.state;\n    const favouritesUpdated = update(favourites, { $unset: [cityId] });\n    localStorage.setItem(\"favourites\", JSON.stringify(favouritesUpdated));\n\n    this.setState({ favourites: favouritesUpdated });\n  }\n\n  render() {\n    const { favourites, selectedCityId, weatherData } = this.state;\n    let mainContent;\n\n    switch (selectedCityId) {\n      case false:\n        mainContent = <CityNotFoundPage />;\n        break;\n      case \"\":\n        mainContent = <InitialPage />;\n        break;\n      default:\n        mainContent = (\n          <CityPage\n            data={weatherData[selectedCityId]}\n            isFavourite={this.constructor.checkIfIdIsKey(\n              favourites,\n              selectedCityId\n            )}\n            toggleFavourite={this.toggleFavourite}\n          />\n        );\n    }\n\n    const favouritesEl =\n      Object.keys(favourites).length > 0 ? (\n        <FavouritesList\n          favourites={favourites}\n          selectCity={this.selectCity}\n          selectedCityId={selectedCityId}\n        />\n      ) : (\n        <p className=\"info-text\">\n          To add a favourite, search for a city first!\n        </p>\n      );\n\n    return (\n      <div className=\"content-wrapper\">\n        <aside className=\"sidebar card card--secondary\">\n          <h2 className=\"card__title\">Favourites</h2>\n          {favouritesEl}\n        </aside>\n        <main className=\"main-content card\">\n          <SearchForm fetchCityWeather={this.fetchCityWeather} />\n          {mainContent}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}