{"version":3,"sources":["SearchForm/SearchForm.js","CityNotFoundPage/CityNotFoundPage.js","CityPage/CityPage.js","FavouritesList/FavouritesList.js","InitialPage/InitialPage.js","App.js","index.js"],"names":["SearchForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","placeholderText","state","cityQuery","event","setState","target","value","preventDefault","fetchCityWeather","cityQueryArr","split","length","react_default","a","createElement","className","onSubmit","type","placeholder","onChange","Component","CityNotFoundPage","CityPage","_ref","data","isFavourite","toggleFavourite","cityName","concat","name","sys","country","temp","Math","round","main","tempStr","btnClasses","btnText","onClick","id","FavouritesList","favourites","selectCity","selectedCityId","favouriteLis","values","sort","b","map","favourite","classes","key","InitialPage","App","parseWeatherData","addFavourite","removeFavourite","owmApiKey","process","units","weatherData","obj","keys","includes","toString","favouritesStr","localStorage","getItem","JSON","parse","_this2","countryCode","arguments","undefined","_this$state","baseApiUrl","fetch","then","res","json","owmData","cod","cityId","prevState","update","defineProperty","$set","cityWeatherData","Date","now","dt","_this$state2","constructor","checkIfIdIsKey","cityData","favouritesUpdated","setItem","stringify","$unset","mainContent","_this$state3","CityPage_CityPage","favouritesEl","FavouritesList_FavouritesList","SearchForm_SearchForm_SearchForm","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.c6492dfc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./SearchForm.css\";\n\nexport default class SearchForm extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.placeholderText = \"E.g. Turku, FI\";\n    this.state = { cityQuery: \"\" };\n  }\n\n  handleChange(event) {\n    this.setState({ cityQuery: event.target.value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const { cityQuery } = this.state;\n    const { fetchCityWeather } = this.props;\n    const cityQueryArr = cityQuery.split(\",\");\n\n    if (cityQueryArr.length === 2) {\n      fetchCityWeather(cityQueryArr[0], cityQueryArr[1]);\n    }\n    fetchCityWeather(cityQueryArr[0]);\n  }\n\n  render() {\n    const { cityQuery } = this.state;\n\n    return (\n      <form className=\"search\" onSubmit={this.handleSubmit}>\n        <label className=\"card__title search__label\">\n          Search for a city:\n          <input\n            className=\"search__text-field\"\n            type=\"text\"\n            value={cityQuery}\n            placeholder={this.placeholderText}\n            onChange={this.handleChange}\n          />\n        </label>\n        <input className=\"search__btn\" type=\"submit\" value=\"GO!\" />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function CityNotFoundPage() {\n  return <p className=\"info-text info-text--center\">No such city found :(</p>;\n}\n","import React from \"react\";\n\nimport \"./CityPage.css\";\n\nexport default function CityPage({ data, isFavourite, toggleFavourite }) {\n  const cityName = `${data.name}, ${data.sys.country}`;\n  // add \"+\" sign in front of positive temperatures and round temps\n  const temp = Math.round(data.main.temp);\n  const tempStr = temp > 0 ? `+${temp}` : temp;\n\n  const btnClasses = isFavourite\n    ? \"city__fav-btn  city__fav-btn--remove\"\n    : \"city__fav-btn\";\n\n  const btnText = isFavourite ? \"UNFAVOURITE\" : \"FAVOURITE\";\n\n  return (\n    <section className=\"city\">\n      <h2 className=\"city__name\">{cityName}</h2>\n      <button className={btnClasses} onClick={() => toggleFavourite(data.id)}>\n        {btnText}\n      </button>\n\n      <h3 className=\"city__temp\">{tempStr} &deg;C</h3>\n    </section>\n  );\n}\n","import React from \"react\";\nimport \"./FavouritesList.css\";\n\nexport default function FavouritesList({\n  favourites,\n  selectCity,\n  selectedCityId\n}) {\n  const favouriteLis = Object.values(favourites)\n    .sort((a, b) => {\n      if (a.name < b.name) {\n        return -1;\n      } else if (a.name > b.name) {\n        return 1;\n      }\n      return 0;\n    })\n    .map(favourite => {\n      const { id, name, country } = favourite;\n      const classes =\n        id === selectedCityId\n          ? \"favourites__item favourites__item--selected\"\n          : \"favourites__item\";\n      return (\n        <li\n          className={classes}\n          key={id}\n          onClick={() => selectCity(id, name, country)}\n        >{`${name}, ${country}`}</li>\n      );\n    });\n\n  return <ul className=\"favourites\">{favouriteLis}</ul>;\n}\n","import React from \"react\";\n\nexport default function InitialPage() {\n  return (\n    <p className=\"info-text info-text--center\">\n      Search for a city or select one from your favourites.\n    </p>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport \"./SearchForm/SearchForm\";\nimport CityNotFoundPage from \"./CityNotFoundPage/CityNotFoundPage\";\nimport CityPage from \"./CityPage/CityPage\";\nimport FavouritesList from \"./FavouritesList/FavouritesList\";\nimport InitialPage from \"./InitialPage/InitialPage\";\nimport SearchForm from \"./SearchForm/SearchForm\";\n\nimport update from \"immutability-helper\";\n\nclass App extends Component {\n  /* \n  Helper function to check if id-number is found in given object's keys\n  */\n  static checkIfIdIsKey(obj, id) {\n    return Object.keys(obj).includes(id.toString());\n  }\n\n  constructor(props) {\n    super(props);\n    this.fetchCityWeather = this.fetchCityWeather.bind(this);\n    this.parseWeatherData = this.parseWeatherData.bind(this);\n    this.selectCity = this.selectCity.bind(this);\n\n    this.addFavourite = this.addFavourite.bind(this);\n    this.removeFavourite = this.removeFavourite.bind(this);\n    this.toggleFavourite = this.toggleFavourite.bind(this);\n\n    this.state = {\n      // NOTE: I do realize that this doesn't protect the Api key from being viewed\n      // client-side but at least it isn't stored in the public repository.\n      owmApiKey: process.env.REACT_APP_OWM_API_KEY,\n      units: \"metric\", // 'imperial' or 'metric'\n      weatherData: {},\n      selectedCityId: \"\", // cityId from OWM or boolean false, if city not found\n      favourites: {}\n    };\n  }\n\n  // Get the favourites from localStorage\n  componentDidMount() {\n    const favouritesStr = localStorage.getItem(\"favourites\");\n    if (favouritesStr !== null) {\n      const favourites = JSON.parse(favouritesStr);\n      this.setState({ favourites });\n    }\n  }\n\n  /* \n  Returns the OpenWeatherMap json-object for the city or boolean false if no\n  such city was found.\n  \n  params: name of the city and optionally the two letter country code.\n  */\n  fetchCityWeather(cityName, countryCode = \"\") {\n    const { owmApiKey, units } = this.state;\n    const baseApiUrl = `https://api.openweathermap.org/data/2.5/weather?APPID=${owmApiKey}&units=${units}`;\n    // adds country code to the query if it was given\n    const cityQuery =\n      countryCode.length === 2 ? `${cityName},${countryCode}` : cityName;\n\n    fetch(baseApiUrl + `&q=${cityQuery}`)\n      .then(res => res.json())\n      .then(json => {\n        this.parseWeatherData(json);\n      });\n  }\n\n  /* \n  Checks if a city was found and sets weatherData and selectedCityId inside state\n  accordingly.\n\n  params: the json response from the OpenWeatherMap API\n  */\n  parseWeatherData(owmData) {\n    // 404 if no such city, 400 if bad request, mainly empty query\n    if (owmData.cod === \"404\" || owmData.cod === \"400\") {\n      this.setState({ selectedCityId: false });\n    } else {\n      const cityId = owmData.id;\n      this.setState(prevState =>\n        update(prevState, {\n          weatherData: { [cityId]: { $set: owmData } },\n          selectedCityId: { $set: cityId }\n        })\n      );\n    }\n  }\n\n  /* \n  Marks the given city as selected. Doesn't fetch data if recent enough data\n  available.\n  */\n  selectCity(cityId, cityName, countryCode) {\n    const { weatherData } = this.state;\n    const cityWeatherData = weatherData[cityId];\n    if (typeof cityWeatherData === \"undefined\") {\n      // the data could be fetched using the cityId also but I wanted to\n      // keep things simple and not add another function/modify the fetch function.\n      this.fetchCityWeather(cityName, countryCode);\n    } else if (Date.now() - 1000 * cityWeatherData.dt > 3600000) {\n      // if existing data is older than 60 min, fetch fresh data\n      this.fetchCityWeather(cityName, countryCode);\n    } else {\n      this.setState(prevState =>\n        update(prevState, {\n          selectedCityId: { $set: cityId }\n        })\n      );\n    }\n  }\n\n  toggleFavourite(cityId) {\n    const { favourites, weatherData } = this.state;\n    if (this.constructor.checkIfIdIsKey(favourites, cityId)) {\n      this.removeFavourite(cityId);\n    } else {\n      const cityData = weatherData[cityId];\n      const cityName = cityData.name;\n      const countryCode = cityData.sys.country;\n      this.addFavourite(cityId, cityName, countryCode);\n    }\n  }\n\n  /* \n  Add a new favourite to the localStorage and to the state.\n  */\n  addFavourite(cityId, cityName, countryCode) {\n    const { favourites } = this.state;\n    const favouritesUpdated = update(favourites, {\n      [cityId]: { $set: { id: cityId, name: cityName, country: countryCode } }\n    });\n    localStorage.setItem(\"favourites\", JSON.stringify(favouritesUpdated));\n\n    this.setState({ favourites: favouritesUpdated });\n  }\n\n  /* \n  Remove a favourite from the localStorage and from the state.\n  */\n  removeFavourite(cityId) {\n    const { favourites } = this.state;\n    const favouritesUpdated = update(favourites, { $unset: [cityId] });\n    localStorage.setItem(\"favourites\", JSON.stringify(favouritesUpdated));\n\n    this.setState({ favourites: favouritesUpdated });\n  }\n\n  render() {\n    const { favourites, selectedCityId, weatherData } = this.state;\n    let mainContent;\n\n    switch (selectedCityId) {\n      case false:\n        mainContent = <CityNotFoundPage />;\n        break;\n      case \"\":\n        mainContent = <InitialPage />;\n        break;\n      default:\n        mainContent = (\n          <CityPage\n            data={weatherData[selectedCityId]}\n            isFavourite={this.constructor.checkIfIdIsKey(\n              favourites,\n              selectedCityId\n            )}\n            toggleFavourite={this.toggleFavourite}\n          />\n        );\n    }\n\n    const favouritesEl =\n      Object.keys(favourites).length > 0 ? (\n        <FavouritesList\n          favourites={favourites}\n          selectCity={this.selectCity}\n          selectedCityId={selectedCityId}\n        />\n      ) : (\n        <p className=\"info-text\">\n          To add a favourite, search for a city first!\n        </p>\n      );\n\n    return (\n      <div className=\"content-wrapper\">\n        <aside className=\"sidebar card card--secondary\">\n          <h2 className=\"card__title\">Favourites</h2>\n          {favouritesEl}\n        </aside>\n        <main className=\"main-content card\">\n          <SearchForm fetchCityWeather={this.fetchCityWeather} />\n          {mainContent}\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}